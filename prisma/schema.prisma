// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  address   String    @id
  nonce     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
}

model Project {
  slug        String   @id
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userAddress String

  user User @relation(fields: [userAddress], references: [address])

  nftContracts NFTContract[]
}

model NFTContract {
  name              String
  contractAddress   String
  chainId           Int
  version           String
  projectSlug       String
  abiCID            String
  metadataSchemaCID String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  description       String   @db.LongText

  project         Project           @relation(fields: [projectSlug], references: [slug])
  outputSchema    OutputSchema[]
  nftEventFilters NFTEventFilters[]
  nfts            NFT[]

  @@id([contractAddress, chainId])
}

model NFTEventFilters {
  contractAddress String
  chainId         Int
  eventHash       String
  eventName       String
  parameterName   String

  nftContract NFTContract @relation(fields: [contractAddress, chainId], references: [contractAddress, chainId])

  @@id([contractAddress, chainId, eventHash, parameterName])
}

model OutputSchema {
  contractAddress String
  chainId         Int
  mappingName     String
  jsonName        String

  nftContract NFTContract @relation(fields: [contractAddress, chainId], references: [contractAddress, chainId])

  @@id([contractAddress, chainId, mappingName])
}

model NFT {
  contractAddress String
  chainId         Int
  tokenId         String
  isActive        Boolean @default(true)

  nftContract NFTContract @relation(fields: [contractAddress, chainId], references: [contractAddress, chainId])

  nftDataPoint NFTDataPoint[]

  @@id([contractAddress, chainId, tokenId])
}

model NFTDataPoint {
  contractAddress String
  chainId         Int
  tokenId         String
  blockNumber     Int
  blockTimestamp  Int
  traitName       String
  traitValue      String

  nft NFT @relation(fields: [contractAddress, chainId, tokenId], references: [contractAddress, chainId, tokenId])

  @@id([contractAddress, chainId, tokenId, traitName])
}

// model NFT {
//   id              String   @id
//   contractAddress String
//   chainId         Int
//   tokenId         String
//   ownerAddress    String
//   metadata        String   @db.LongText
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt

//   contract NFTContract @relation(fields: [contractAddress, chainId], references: [contractAddress, chainId])
// }
